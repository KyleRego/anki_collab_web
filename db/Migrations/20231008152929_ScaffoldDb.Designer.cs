// <auto-generated />
using System;
using AnkiCollab.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231008152929_ScaffoldDb")]
    partial class ScaffoldDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnkiCollab.Db.Models.Commit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("commit_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck");

                    b.Property<string>("Rationale")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rationale");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("commits");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_path");

                    b.Property<string>("HumanHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("human_hash");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner");

                    b.Property<int>("ParentDeckId")
                        .HasColumnType("integer")
                        .HasColumnName("parent");

                    b.Property<bool>("Private")
                        .HasColumnType("boolean")
                        .HasColumnName("private");

                    b.Property<int>("SubscriptionsCount")
                        .HasColumnType("integer")
                        .HasColumnName("subscriptions");

                    b.HasKey("Id");

                    b.ToTable("decks");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer")
                        .HasColumnName("note");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("reviewed");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("fields");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<string>("Guid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guid");

                    b.Property<DateTimeOffset>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("notetype");

                    b.Property<bool>("Reviewed")
                        .HasColumnType("boolean")
                        .HasColumnName("reviewed");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.HasIndex("NoteTypeId");

                    b.ToTable("notes");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.NoteType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Css")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("css");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner");

                    b.HasKey("Id");

                    b.ToTable("notetype");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.NoteTypeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnswerFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("afmt");

                    b.Property<int>("NoteTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("notetype");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<string>("QuestionFormat")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qfmt");

                    b.HasKey("Id");

                    b.HasIndex("NoteTypeId");

                    b.ToTable("notetype_template");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeckId")
                        .HasColumnType("integer")
                        .HasColumnName("deck_id");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("subscriptions");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Commit", b =>
                {
                    b.HasOne("AnkiCollab.Db.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Field", b =>
                {
                    b.HasOne("AnkiCollab.Db.Models.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Note", b =>
                {
                    b.HasOne("AnkiCollab.Db.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnkiCollab.Db.Models.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.NoteTypeTemplate", b =>
                {
                    b.HasOne("AnkiCollab.Db.Models.NoteType", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("AnkiCollab.Db.Models.Subscription", b =>
                {
                    b.HasOne("AnkiCollab.Db.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deck");
                });
#pragma warning restore 612, 618
        }
    }
}
